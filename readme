MANUAL: PROJECT 3 DEVELOPING A NETWORKED SPELL CHECKER
By Priya Nigam, CIS3207

Thank you for choosing to use this networked spell checker.

I. Program Introduction
        This program is a networked spell check server that uses multi-threaded programming and synchronization. The
        server reads sequences of words and if the word is in dictionary, it's considered to be spelled properly. This
        server program operation consists of a main thread, a pool of worker threads, and another server
        thread that writes to a log file. This log file can be accessed and contains each word along with if it was
        spelled properly or not. This program should be able to handle the client connections of at least 3 servers at
        once.
II. Program Design
        In the main.c file, there is a server thread that takes in a command line argument of the name of a dictionary file
        and a port number. If these are not provided, then a default port number and/or default
        dictionary are used. This is defined as "dictionary.txt" and "22222" respectively. The purpose of the server
        thread is to accept and distribute connection requests from clients while also constructing a log file
        of all spell check activities.

        When the server starts, the main thread opens the dictionary file and reads it into an array of strings. It also
        creates a work queue of file descriptors and a log queue of strings. The work queue is used to store the socket
        descriptors of the clients that connect to it, and the log queue contains information about if each
        word is spelled correctly or not. The main thread creates a pool of NUM_WORKERS worker threads
        and then accepts and distributes connect requests. The connected sockets are added to the work queue and
        any sleeping workers are signaled that there's a new socket in the queue. This was specified using
        pthreads lock and unlock functions within the work queue struct.

        A second server thread monitors the log queue and processes entries by removing and writing them to a log
        file. Within each worker thread, while the work queue is not empty, a socket is removed from the queue,
        there is a notification that there's an empty spot in the queue, and the client is serviced. In this client
        servicing, while the client has words left to be read, the word is read and it is indicated whether that
        word is in the dictionary. This is then written to the log queue to be recorded. Because the work queue and the
        log queue are shared data structures, mutex and condition signal/wait are used to ensure that we avoid
        the Producer-Consumer Problem.

III. Program Implementation
        To implement this program, type "make" in a directory where the makefile is present. Then, you may run the
        program my_shell using ./spellchecker

        The program will continue to run and ask for commands until you can exit by typing "quit".

IV. Program Documentation
        This program, otherwise known as Project 2, was completed on 4/8/20 for Dr. Fiore's CIS 3207 class under
        the guidance of TA Shakeel Alibhai by Priya Nigam.

        The github for this page (private) is: https://github.com/Priya-Nigam/Project3

V. Testing Methods + Results of Applying Test

        To test this spell checker, I tried a wide variety of clients and tried to also test the effects of running this
        for an extended period of time.

        Firstly, to make sure that the spell checker feature worked, I tried to run a basic spell checker without
        threads or networked clients. Once I was sure that the dictionary could correctly spell check, I added the
        networked connection component. I used modified versions of code provided in Dr. Fiore's CIS3207 class
        and had the clients echo whatever was written. This allowed me to confirm that the networked connection worked
        properly. Next, I added the threads with the log queue and work queue.

        To ensure that the threads worked properly, I first tried to see if I could run
        multiple connections to clients at once. Then, I tested the program in its entirety
        and looked for issues in multiple threads connecting at once. To test multiple clients,
        I used nc netcat with 127.0.0.1 loopback addresses and multiple terminal windows open
        on my computer.

        When I tried to run the program in its entirety, the message produced for the spelling/mispelling
        often did not have the word written with all of the letters or included extraneous characters, which
        indicated a memory or pointer issue. This was fixed by using malloc and ensuring that the
        problem was fixed when using just one client or multiple clients.

        I also had the problem of the log file not being written to. This was because the program would crash with
        a segmentation fault or a bus error, and my program was written such that the log file
        was only written to after a client connection was finished. If the program crashed, then
        the log file would never be written to. To fix this issue, I changed when the log file was written to
        and tried to fix the segmentation fault, which seemed to be caused by a memory allocation
        problem. To ensure that this was not an issue of the work or log queue, I used checks to
        ensure that the critical sections were only opened as necessary and that information was added and deleted
        properly.

        Once these bugs were fixed and the program was able to run with three clients on my computer, I increased the
        number of threads and made sure that the programs were still able to run well.
        Then, I tried to use the cis-linux2 nodes and made sure that all of the functionality worked
        on a real network.